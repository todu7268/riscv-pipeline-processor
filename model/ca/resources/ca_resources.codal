/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_
 *  """""""""""""""""""""""""""""resources.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

#define BOOLEAN_BIT     1    // Boolean control bit of width 1-bit
#define TWO_BIT         2       // Two bit wide control signal


pipeline pipe
{
    IF, ID, EX, ME, WB
};

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

signal bit[ADDR_W] s_if_nextpc;

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

// Program Counter
register bit[ADDR_W] r_id_pc            { pipeline = pipe.ID; };
// Instruction -- Machine Code
signal bit[INSTR_W] s_id_instr;

// ALU Operation Control
signal bit[ALUOP_W] s_id_aluop;

//Control Signals
signal bit[REGWRITE_W] s_id_regwrite;
signal bit[SRC2_W] s_id_alusrc2;
signal bit[HALT_W] s_id_halt;


//Instruction opcode + func3 + func7
signal bit[OPC_W] s_id_opc;

//Signals from Phase 4
signal bit [RF_XPR_W] s_id_rs1;
signal bit [RF_XPR_W] s_id_rs2;
signal bit [WORD_W] s_id_immed;
signal bit [RF_XPR_W] s_id_rd;
signal bit [WORD_W] s_id_reg1;
signal bit [WORD_W] s_id_reg2;

//Phase 6 Register File Forwarding Signals
signal bit [RFF1_W] s_rff1_sel;
signal bit [RFF2_W] s_rff2_sel;
signal bit [WORD_W] s_id_mux1; //Output of mux1 in ID
signal bit [WORD_W] s_id_mux2; //Output of mux2 in ID

// -------------------------------------------------------------------------------------------------
// Execute stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_ex_pc            		{ pipeline = pipe.EX; };
register bit[INSTR_W] r_ex_instr                { pipeline = pipe.EX; };
register bit[HALT_W] r_ex_halt            		{ pipeline = pipe.EX; };

// ALU Operation Control
register bit[ALUOP_W] r_ex_aluop        		{ pipeline = pipe.EX; };

//Signals and registers from Phase 4
signal bit [WORD_W] s_ex_src2;
signal bit [WORD_W] s_ex_alu;

register bit [RF_XPR_W] r_ex_rd  { pipeline = pipe.EX; };
register bit [REGWRITE_W] r_ex_regwrite { pipeline = pipe.EX; };
register bit [WORD_W] r_ex_reg1 { pipeline = pipe.EX; };
register bit [SRC2_W] r_ex_alusrc2 { pipeline = pipe.EX; };
register bit [WORD_W] r_ex_reg2 { pipeline = pipe.EX; };
register bit [WORD_W] r_ex_immed { pipeline = pipe.EX; };

//Phase 6 Data Hazard Forwarding Signals
signal bit [FWDA_W] s_ex_fwdA_sl;
signal bit [FWDB_W] s_ex_fwdB_sl;
signal bit [WORD_W] s_ex_src1; //output of mux1 in EX
signal bit [WORD_W] s_ex_mux2; //output of mux2 in EX


// -------------------------------------------------------------------------------------------------
// Memory stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_me_pc           			{ pipeline = pipe.ME; };
register bit[INSTR_W] r_me_instr                { pipeline = pipe.ME; };

//Registers from Phase 4
register bit [REGWRITE_W] r_me_regwrite { pipeline = pipe.ME; };
register bit [RF_XPR_W] r_me_rd { pipeline = pipe.ME; };
register bit [WORD_W] r_me_alu { pipeline = pipe.ME; };

// -------------------------------------------------------------------------------------------------
// Writeback stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_wb_pc            		{ pipeline = pipe.WB; };
register bit[INSTR_W] r_wb_instr                { pipeline = pipe.WB; };

//Registers from Phase 4
register bit [RF_XPR_W] r_wb_rd { pipeline = pipe.WB; };
register bit [WORD_W] r_wb_alu { pipeline = pipe.WB; };
register bit [REGWRITE_W] r_wb_regwrite { pipeline = pipe.WB; };

// -------------------------------------------------------------------------------------------------
// Pipeline control
// -------------------------------------------------------------------------------------------------

signal   bit[1] s_if_stall;
signal   bit[1] s_id_stall;
signal   bit[1] s_id_clear;
register bit[1] r_id_clear {default = true;};
signal   bit[1] s_ex_stall;
signal   bit[1] s_ex_clear;
signal   bit[1] s_me_stall;
signal   bit[1] s_me_clear;
signal   bit[1] s_wb_stall;
signal   bit[1] s_wb_clear;




// -------------------------------------------------------------------------------------------------
// SYSCALL support for simulation
// -------------------------------------------------------------------------------------------------
signal bit [BOOLEAN_BIT]            s_syscall_pending;
signal bit [BOOLEAN_BIT]            s_syscall_stall;
register bit [TWO_BIT]              r_syscall_delay         {default = 0;};

