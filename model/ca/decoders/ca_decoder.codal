/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_decoder.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "common_enums.hcodal"


// -------------------------------------------------------------------------------------------------
// Decoder
// -------------------------------------------------------------------------------------------------

set dec = i_hw_halt
                ,i_hw_alu
                ,i_hw_alu_i
                ,i_hw_alu_special
                ,i_hw_btype_branches
                ,i_hw_utype_ops
                ,i_hw_itype_jlreg
                ,i_hw_itype_jlink
                ,i_hw_loads
                ,i_hw_store
                ;

// -------------------------------------------------------------------------------------------------
// Halt instruction
// -------------------------------------------------------------------------------------------------

// This instruction has no operands.

element i_hw_halt
{
    use opc_halt as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_FALSE;

        // Operations
        s_id_aluop = ALU_NOP;

        // Operand MUXes
        s_id_alusrc2 = DONT_CARE;

        // HALT Command
        s_id_halt = HALT_HALT;
        
        //Added signals for phase 7:
        //Set all these to don't care because it's a halt instruction
        
        s_id_immsel = IMM_NONE; //jzm
        s_id_brnchop = BRANCH_FALSE; //jzm
        s_id_rfwt_sel = RFWT_ALU; //jzm
        s_id_brnch_sel = BRADD_ADDR; //jzm
        s_id_alusrc1 = ALU_SRC1_REG; //jzm

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP
    };
};

// -------------------------------------------------------------------------------------------------
// Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_alu
{
    use opc_rtype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
       
        switch (opc)
        {
            case RTYPE_ADD:
                s_id_aluop = ALU_ADD;
                break;
            case RTYPE_SUB:
                s_id_aluop = ALU_SUB;
                break;
            case RTYPE_SLL:
                s_id_aluop = ALU_SLL;
                break;
            case RTYPE_SLT:
                s_id_aluop = ALU_SLT;
                break;
            case RTYPE_SLTU:
                s_id_aluop = ALU_SLTU;
                break;
            case RTYPE_XOR:
                s_id_aluop = ALU_XOR;
                break;
            case RTYPE_SRL:
                s_id_aluop = ALU_SRL;
                break;
            case RTYPE_SRA:
                s_id_aluop = ALU_SRA;
                break;
            case RTYPE_OR:
                s_id_aluop = ALU_OR;
                break;
            case RTYPE_AND:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }
         // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_alusrc1 = ALU_SRC1_REG;
        // Operand MUXes
        s_id_alusrc2 = ALU2_REG;
        
        // HALT Command
        s_id_halt = HALT_NOHALT;

        s_id_brnchop = BRANCH_FALSE;

        //Phase 7:
        s_id_immsel = IMM_NONE;

        s_id_rfwt_sel = RFWT_ALU;

        s_id_brnch_sel = BRADD_ADDR;

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
        
    };
};

//I_HW_ALU_I Implementation, most copy pasted from I_HW_ALU, changed to I-type
element i_hw_alu_i
{
    use opc_itype_alu as opc;

    assembly { opc };
    binary { opc };

    

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case ITYPE_ADDI:
                s_id_aluop = ALU_ADD;
                break;
            case ITYPE_SLTI:
                s_id_aluop = ALU_SLT;
                break;
            case ITYPE_SLTIU:
                s_id_aluop = ALU_SLTU;
                break;
            case ITYPE_XORI:
                s_id_aluop = ALU_XOR;
                break;
            case ITYPE_ORI:
                s_id_aluop = ALU_OR;
                break;
            case ITYPE_ANDI:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_iTYPE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
}; 

//Phase 7: ALU Special
element i_hw_alu_special
{
    use opc_itype_special as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case IMM_SHIFT_SLLI:
                s_id_aluop = ALU_SLL;
                break;
            case IMM_SHIFT_SRLI:
                s_id_aluop = ALU_SRL;
                break;
            case IMM_SHIFT_SRAI:
                s_id_aluop = ALU_SRA;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_iTYPE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
};

//Phase 7 Branches
element i_hw_btype_branches
{
    use opc_btype_branches as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        

        switch (opc)
        {
            case BTYPE_BEQ:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            case BTYPE_BNE:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            case BTYPE_BLT:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            case BTYPE_BGE:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            case BTYPE_BLTU:
                s_id_aluop = ALU_SLTU;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            case BTYPE_BGEU:
                s_id_aluop = ALU_SLTU;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            default:
                // s_id_aluop = ALU_NOP;
                // s_id_brnchop = BRANCH_COND_FALSE;
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }
        // Branches do not write to reg file
        s_id_regwrite = WE_FALSE;
        // Registers for inputs alusrc1 and 2
        s_id_alusrc2 = ALU2_REG;
        
        // HALT Command
        s_id_halt = HALT_NOHALT; //not a halt instruction

        s_id_immsel = IMM_bTYPE; //need b type immediate

        // s_id_rfwt_sel = DONT_CARE; //write enable is false
        s_id_rfwt_sel = RFWT_ALU;
        
        s_id_brnch_sel = BRADD_ADDR; 
        
        s_id_alusrc1 = ALU_SRC1_REG; //same as src2

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
};

//Phase 7 Utype ops
element i_hw_utype_ops
{
    use opc_utype_ops as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case UTYPE_LUI:
                s_id_alusrc1 = ALU_SRC1_ZERO;
                s_id_aluop = ALU_ADD; //is it add or sll or sth else?
                break;
            case UTYPE_AUIPC:
                s_id_alusrc1 = ALU_SRC1_PC;
                s_id_aluop = ALU_ADD; //is it add or sll or sth else?
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_uTYPE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
};

//Phase 7 Jlreg
element i_hw_itype_jlreg
{
    use opc_itype_jlreg as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
       

        // switch (opc)
        // {
        //     case ITYPE_JALR:
        s_id_aluop = ALU_ADD;
        //         break;
        //     default:
        //         codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
        //         break;
        // }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_brnchop = BRANCH_TRUE; //always branch here
        //Phase 7:
        s_id_immsel = IMM_iTYPE; //i-type immediate
        s_id_rfwt_sel = RFWT_PC;
        
        s_id_brnch_sel = BRADD_ALU;

        s_id_alusrc1 = ALU_SRC1_REG;

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
};

//Phase 7 Jlink
element i_hw_itype_jlink
{
    use opc_jtype_jlink as opc;

    assembly { opc };
    binary { opc };

    

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_PC;

        // switch (opc)
        // {
        //     case JTYPE_JAL:
        s_id_aluop = ALU_ADD; //jzm//don't use alu here
        //         break;
        //     default:
        //         codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
        //         break;
        // }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_jTYPE; //JAL uses j-type immediate (according to risc-v manual)
        s_id_brnchop = BRANCH_TRUE; //always branch
        s_id_brnch_sel = BRADD_ADDR; 
        s_id_alusrc1 = ALU_SRC1_REG; //jzm

        //Phase 8: Memop adding to all other elements
        s_id_memop = MEM_NOP;
    };
};

//Phase 8 elements
element i_hw_loads 
{
    use opc_itype_loads as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        //Signals from previous phases
        s_id_regwrite = WE_TRUE; // Load writes to registers
        s_id_rfwt_sel = RFWT_MEM; // Mux selects the memory data
        s_id_alusrc2 = ALU2_IMM; //Immediate
        s_id_halt = HALT_NOHALT; //No halt
        s_id_immsel = IMM_iTYPE; //itype for loads
        s_id_brnchop = BRANCH_FALSE; //Never Branch
        s_id_brnch_sel = DONT_CARE; //We dont branch, so we dont care
        s_id_alusrc1 = ALU_SRC1_REG; //First input is a register
        s_id_aluop = ALU_ADD;

        switch(opc){
            case ITYPE_LB:
                s_id_memop = MEM_LB;
                break;
            case ITYPE_LH:
                s_id_memop = MEM_LH;
                break;
            case ITYPE_LW:
                s_id_memop = MEM_LW;
                break;
            case ITYPE_LBU:
                s_id_memop = MEM_LBU;
                break;
            case ITYPE_LHU:
                s_id_memop = MEM_LHU;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }
    };
};

element i_hw_store 
{
    use opc_stype_store as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        //Signals from previous phases
        s_id_regwrite = WE_FALSE; // Store writes to memory, not registers
        s_id_rfwt_sel = DONT_CARE; // Not writing, we dont care
        s_id_alusrc2 = ALU2_IMM; //Immediate
        s_id_halt = HALT_NOHALT; //No halt
        s_id_immsel = IMM_sTYPE; //s-type
        s_id_brnchop = BRANCH_FALSE; //Never Branch
        s_id_brnch_sel = DONT_CARE; //Dont care about this since we dont branch
        s_id_alusrc1 = ALU_SRC1_REG; //First input is a register
        s_id_aluop = ALU_ADD; 

        switch(opc){
            case STYPE_SB:
                s_id_memop = MEM_SB;
                break;
            case STYPE_SH:
                s_id_memop = MEM_SH;
                break;
            case STYPE_SW:
                s_id_memop = MEM_SW;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }
    };
};