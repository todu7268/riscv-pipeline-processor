/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_decoder.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "common_enums.hcodal"


// -------------------------------------------------------------------------------------------------
// Decoder
// -------------------------------------------------------------------------------------------------

set dec = i_hw_halt
                ,i_hw_alu
                ,i_hw_alu_i
                ,i_hw_alu_special
                ,i_hw_btype_branches
                ;

// -------------------------------------------------------------------------------------------------
// Halt instruction
// -------------------------------------------------------------------------------------------------

// This instruction has no operands.

element i_hw_halt
{
    use opc_halt as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_FALSE;

        // Operations
        s_id_aluop = ALU_NOP;

        // Operand MUXes
        s_id_alusrc2 = DONT_CARE;

        // HALT Command
        s_id_halt = HALT_HALT;
        
        //Added signals for phase 7:
        //Set all these to don't care because it's a halt instruction
        s_id_immsel = DONT_CARE;
        s_id_brnchop = DONT_CARE;
        s_id_rfwt_sel = DONT_CARE;
        s_id_brnch_sel = DONT_CARE;
        s_id_alusrc1 = DONT_CARE;
    };
};

// -------------------------------------------------------------------------------------------------
// Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_alu
{
    use opc_rtype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case RTYPE_ADD:
                s_id_aluop = ALU_ADD;
                break;
            case RTYPE_SUB:
                s_id_aluop = ALU_SUB;
                break;
            case RTYPE_SLL:
                s_id_aluop = ALU_SLL;
                break;
            case RTYPE_SLT:
                s_id_aluop = ALU_SLT;
                break;
            case RTYPE_SLTU:
                s_id_aluop = ALU_SLTU;
                break;
            case RTYPE_XOR:
                s_id_aluop = ALU_XOR;
                break;
            case RTYPE_SRL:
                s_id_aluop = ALU_SRL;
                break;
            case RTYPE_SRA:
                s_id_aluop = ALU_SRA;
                break;
            case RTYPE_OR:
                s_id_aluop = ALU_OR;
                break;
            case RTYPE_AND:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_REG;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_NONE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;
    };
};

//I_HW_ALU_I Implementation, most copy pasted from I_HW_ALU, changed to I-type
element i_hw_alu_i
{
    use opc_itype_alu as opc;

    assembly { opc };
    binary { opc };

    

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case ITYPE_ADDI:
                s_id_aluop = ALU_ADD;
                break;
            case ITYPE_SLTI:
                s_id_aluop = ALU_SLT;
                break;
            case ITYPE_SLTIU:
                s_id_aluop = ALU_SLTU;
                break;
            case ITYPE_XORI:
                s_id_aluop = ALU_XOR;
                break;
            case ITYPE_ORI:
                s_id_aluop = ALU_OR;
                break;
            case ITYPE_ANDI:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_iTYPE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;
    };
}; 

//Phase 7: ALU Special
element i_hw_alu_special
{
    use opc_itype_special as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwt_sel = RFWT_ALU;

        switch (opc)
        {
            case IMM_SHIFT_SLLI:
                s_id_aluop = ALU_SLL;
                break;
            case IMM_SHIFT_SRLI:
                s_id_aluop = ALU_SRL;
                break;
            case IMM_SHIFT_SRAI:
                s_id_aluop = ALU_SRA;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc2 = ALU2_IMM;

        // HALT Command
        s_id_halt = HALT_NOHALT;

        //Phase 7:
        s_id_immsel = IMM_iTYPE;
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;
    };
};

//Phase 7 Branches
element i_hw_btype_branches
{
    use opc_btype_branches as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Branches do not write to reg file
        s_id_regwrite = WE_FALSE;
        s_id_rfwt_sel = DONT_CARE; //write enable is false

        switch (opc)
        {
            case BTYPE_BEQ:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            case BTYPE_BNE:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            case BTYPE_BLT:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            case BTYPE_BGE:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            case BTYPE_BLTU:
                s_id_aluop = ALU_SLTU;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;
            case BTYPE_BGEU:
                s_id_aluop = ALU_SLTU;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
            default:
                s_id_aluop = ALU_NOP;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;
        }

        // Registers for inputs alusrc1 and 2
        s_id_alusrc2 = ALU2_REG;

        // HALT Command
        s_id_halt = HALT_NOHALT; //not a halt instruction
        s_id_immsel = IMM_bTYPE; //need b type immediate
        s_id_brnch_sel = BRADD_ALU; 
        s_id_alusrc1 = ALU_SRC1_REG; //same as src2
    };
};