/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe4_me.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Memory stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Memory Stage
// -------------------------------------------------------------------------------------------------
event me : pipeline(pipe.ME)
{
    use me_output;

    semantics
    {
        switch(r_me_brnchop){
            case BRANCH_COND_TRUE:
                if (r_me_zero == 1)
                    s_me_pcsrc = 1; //take the branch
                else
                    s_me_pcsrc = 0;
                break;
            case BRANCH_COND_FALSE:
                if (r_me_zero == 0)
                    s_me_pcsrc = 1; //dont take the branch
                else
                    s_me_pcsrc = 0;
                break;
            case BRANCH_TRUE:
                s_me_pcsrc = 1; //take the branch
                break;
            case BRANCH_FALSE:
                s_me_pcsrc = 0; //dont take the branch
                break;
        }
        me_output();
    };
};

event me_output : pipeline(pipe.ME)
{
    semantics
    {
        //Assigning all the registers
        r_wb_pc = r_me_pc;
        r_wb_instr = r_me_instr;
        r_wb_regwrite = r_me_regwrite;
        r_wb_rd = r_me_rd;
        r_wb_alu = r_me_alu;

        r_wb_rfwt_sel = r_me_rfwt_sel;
    };
};
