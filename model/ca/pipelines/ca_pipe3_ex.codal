/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;
    use ex_memory;

    semantics
    {

        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt Instructions Indicated");
        }

        //Phase 6 Implementation
        //if-else statements for the FWDCTL
        
        if ((r_me_rd == r_ex_reg1) && (r_me_regwrite) && (r_me_rd != 0)) s_ex_fwdA_sl = 2; //Forward from ME
        else if ((r_wb_rd == r_ex_reg1) && (r_wb_regwrite) && (r_wb_rd != 0)) s_ex_fwdA_sl = 1; //Forward from WB
        else s_ex_fwdA_sl = 0; //Reg File Read

        
        if ((r_me_rd == r_ex_reg2) && (r_me_regwrite) && (r_me_rd != 0)) s_ex_fwdB_sl = 2; //Forward from ME
        else if ((r_wb_rd == r_ex_reg2) && (r_wb_regwrite) && (r_wb_rd != 0)) s_ex_fwdB_sl = 1; //Forward from WB
        else s_ex_fwdB_sl = 0; //Reg File Read
        

        //3-1 Multiplexors based on fwdA and fwdB
        //fwdA multiplexor
        switch(s_ex_fwdA_sl){
            case FWDA_REG:
                s_ex_mux1 = r_ex_src1; //from the previous stage
                break;
            case FWDA_WB:
                s_ex_mux1 = s_wb_result; //from WB
                break;
            case FWDA_MEM:
                s_ex_mux1 = r_me_alu; //from ME
                break;
            default:
                s_ex_mux1 = 0;
                break;
        }
        //fwdB multiplexor
        switch(s_ex_fwdB_sl){
            case FWDB_REG:
                s_ex_mux2 = r_ex_src2; //from previous stage
                break;
            case FWDB_WB:
                s_ex_mux2 = s_wb_result; //from WB
                break;
            case FWDB_MEM:
                s_ex_mux2 = r_me_alu; //from ME
                break;
            default:
                s_ex_mux2 = 0;
                break;
        }

        //Phase 7 src1 multiplexor
        switch(r_ex_alusrc1){
            case ALU_SRC1_ZERO:
                s_ex_src1 = 0;
                break;
            case ALU_SRC1_REG:
                s_ex_src1 = s_ex_mux1;
                break;
            case ALU_SRC1_PC:
                s_ex_src1 = r_ex_pc;
                break;
            default:
                //I'm gonna leave this as SRC2_ERROR
                codasip_fatal(SRC2_ERROR, "Default case: %d \n", r_ex_alusrc1);
                break;
        }

        //Implementing multiplexor (Modifications here for Phase 6)
        switch (r_ex_alusrc2){
            case ALU2_REG:
                s_ex_src2 = s_ex_mux2;
                break;
            case ALU2_IMM:
                s_ex_src2 = r_ex_immed;
                break;
            default:
                s_ex_src2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d \n", r_ex_alusrc2);
                break;
        }

        switch (r_ex_aluop){
            case ALU_NOP:
                s_ex_alu = 0;
                break;
            case ALU_ADD:
                s_ex_alu = s_ex_src1 + s_ex_src2;
                break;
            case ALU_SUB:
                s_ex_alu = s_ex_src1 - s_ex_src2;
                break;
            case ALU_SLL:
                s_ex_alu = s_ex_src1 << s_ex_src2;
                break;
            case ALU_SLT:
                if (((int32) s_ex_src1) < ((int32) s_ex_src2)) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_SLTU:
                if(s_ex_src1 < s_ex_src2) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_XOR:
                s_ex_alu = s_ex_src1 ^ s_ex_src2;
                break;
            case ALU_SRL:
                s_ex_alu = s_ex_src1 >> (uint5) s_ex_src2;
                break;
            case ALU_SRA:
                s_ex_alu = (int32) s_ex_src1 >> (uint5) s_ex_src2;
                break;
            case ALU_OR:
                s_ex_alu = s_ex_src1 | s_ex_src2;
                break;
            case ALU_AND:
                s_ex_alu = s_ex_src1 & s_ex_src2;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case %d \n", r_ex_aluop);
                break;
            
        }

        //Phase 8 call to ex_memory() after ALU operation
        ex_memory();

        s_ex_brimm = r_ex_pc + r_ex_immed; //adder logic, not in the instructions

        switch(r_ex_brnch_sel){
            case BRADD_ALU:
                s_ex_target_address = s_ex_alu;
                break;
            case BRADD_ADDR:
                s_ex_target_address = s_ex_brimm;
                break;
        }
        
        //s_ex_zero logic
        if (s_ex_alu == 0)
            s_ex_zero = 1;
        else //if (s_ex_alu != 0)
            s_ex_zero = 0;

        // Timing
        ex_output();
    };
};

//Phase 8 ex_memory event
event ex_memory : pipeline(pipe.EX)
{
    semantics
    {
        uint1 op_rw; //read/write? load, store or idle?
        uint2 op_type; //idle/burst/non-sequential?
        switch(r_ex_memop){
            case MEM_NOP:
                op_rw = DONT_CARE;
                op_type = CP_AHB_IDLE;
                s_ex_memsize = DONT_CARE;
                break;
            case MEM_SW:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;
            case MEM_SH:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_SB:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_LW:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;
            case MEM_LH:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LHU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LB:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_LBU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case %d \n", r_ex_aluop);
                break; 
        }

        //call to the transport function for the ldst interface
        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu, s_ex_memsize);
        s_ex_encoded_data = ldst.encode_data(s_ex_fwdB_sl, s_ex_alu, s_ex_memsize);
        //Instructions say s_ex_fwd2

    };
};

event ex_output : pipeline(pipe.EX)
{
    
    semantics
    {
        //Assignments for all registers
        r_me_pc = r_ex_pc;
        r_me_instr = r_ex_instr;
        r_me_regwrite = r_ex_regwrite;
        r_me_rd = r_ex_rd;
        r_me_alu = s_ex_alu;

        r_me_rfwt_sel = r_ex_rfwt_sel;
        r_me_brnchop = r_ex_brnchop;
        r_me_target_addr = s_ex_target_address;
        r_me_zero = s_ex_zero;
        
        //Phase 8 assignments
        s_me_stall = s_ex_stall;
        r_me_memop = r_ex_memop;
        r_me_encoded_data = s_ex_encoded_data;
        r_me_memsize = s_ex_memsize;
    };
};
