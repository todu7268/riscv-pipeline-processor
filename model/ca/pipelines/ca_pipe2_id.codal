/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {

        // Set local stall.
        s_id_stall = 0;

        // Decoder activation
        dec(s_id_opc);

        // Update the registers
        id_output();
    };
};
event id_output : pipeline(pipe.ID)
{

    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Pipeline output
        // -----------------------------------------------------------------------------------------
        uint32 id_instr_temp;
        bool cache_ready, cache_response;

        if_fetch.transport(CP_PHS_DATA, cache_ready, cache_response, id_instr_temp);
        s_id_instr = r_id_clear? NOP_INSTRUCTION: id_instr_temp;
        
        //Opcode
        s_id_opc = s_id_instr[31..25] :: s_id_instr[14..12] :: s_id_instr[6..0];
        //Source registers
        s_id_rs1 = s_id_instr[19..15];
        s_id_rs2 = s_id_instr[24..20];
        //Destination register
        s_id_rd = s_id_instr[11..7];
        //immediate
        s_id_immed = (int32)(int12)s_id_instr[31..20];

        //Reading the input registers
        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];

        //Assignments for all of the registers
        
    };
};
