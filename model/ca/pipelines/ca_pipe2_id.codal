/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"
// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {   
        uint32 id_instr_temp;
        bool cache_ready, cache_response;

        // Set local stall.
        s_id_stall = 0;

        if_code.transport(CP_PHS_DATA, cache_ready, cache_response, id_instr_temp);
        s_id_instr = r_id_clear? NOP_INSTRUCTION: id_instr_temp;
        
        //Opcode
        s_id_opc = s_id_instr[31..25] :: s_id_instr[14..12] :: s_id_instr[6..0];
        //Source registers
        s_id_rs1 = s_id_instr[19..15];
        s_id_rs2 = s_id_instr[24..20];
        //Destination register
        s_id_rd = s_id_instr[11..7];
        //immediate
        s_id_immedI = (int32)(int12)s_id_instr[31..20];

        //Other immediates for Phase 7
        s_id_immedB = ((int32)(int12)(s_id_instr [31..31]:: s_id_instr [7..7]:: s_id_instr [30..25]::s_id_instr [11..8])) << 1;
        s_id_immedU = ((int32)(int20)(s_id_instr[31..12])) << 12;
        s_id_immedS = ((int32)(int12)(s_id_instr[31..25]::s_id_instr[11..7]));
        s_id_immedJ = ((int32)(int20)(s_id_instr[31..31]::s_id_instr[19..12]::s_id_instr[20..20]::s_id_instr[30..21])) << 1;

        //Reading the input registers
        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];
        
        //Phase 6 Register File Forwarding, Listing 1
        //RFF1 control
        if ((r_wb_rd == s_id_rs1) && (r_wb_rd != 0) && (r_wb_regwrite)) s_rff1_sel = 1; //Forward
        else s_rff1_sel = 0; //Reg File Read

        //RFF2 control
        if ((r_wb_rd == s_id_rs2) && (r_wb_rd != 0) && (r_wb_regwrite)) s_rff2_sel = 1; //Forward
        else s_rff2_sel = 0; //Reg File Read

        //Phase 6 Register File Forwarding Muxes
        switch(s_rff1_sel){
            case RFF1_REG:
                s_id_mux1 = s_id_reg1; //Read from register file
                break;
            case RFF1_FWD:
                s_id_mux1 = r_wb_alu; //Forwarded
                break;
            default:
                s_id_mux1 = 0;
                break;
        }

        switch(s_rff2_sel){
            case RFF2_REG:
                s_id_mux2 = s_id_reg2; //Read from register file
                break;
            case RFF2_FWD:
                s_id_mux2 = r_wb_alu; //Forwarded
                break;
            default:
                s_id_mux2 = 0;
                break;
        }

        // Decoder activation
        dec(s_id_opc);

        //IMGEN 6-1 multiplexor
        switch(s_id_immsel){
            case IMM_NONE:
                //Don't need an immediate here
                s_id_immed = 0;
                break;
            case IMM_iTYPE:
                //I-type
                s_id_immed = s_id_immedI;
                break;
            case IMM_bTYPE:
                //B-type
                s_id_immed = s_id_immedB;
                break;
            case IMM_uTYPE:
                //U-type
                s_id_immed = s_id_immedU;
                break;
            case IMM_sTYPE:
                //S-type
                s_id_immed = s_id_immedS;
                break;
            case IMM_jTYPE:
                //J-type
                s_id_immed = s_id_immedJ;
                break;
            default:
                codasip_fatal(IMM_NONE, "Error: IMM_NONE\n");
                break;
        }

        // Update the registers
        id_output();
    };
};

event id_output : pipeline(pipe.ID)
{

    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Pipeline output
        // -----------------------------------------------------------------------------------------
        r_ex_pc = r_id_pc;
        r_ex_instr = s_id_instr;

        r_ex_halt = s_id_halt;
        r_ex_aluop = s_id_aluop;  
        r_ex_rd = s_id_rd;
        r_ex_regwrite = s_id_regwrite;
        r_ex_alusrc2 = s_id_alusrc2; 
        r_ex_immed = s_id_immed;
        
        r_ex_reg1 = s_id_rs1;
        r_ex_reg2 = s_id_rs2;

        //Adding src1 and src2 outputs
        r_ex_src1 = s_id_mux1;
        r_ex_src2 = s_id_mux2;

        //Phase 7 registers
        r_ex_brnchop = s_id_brnchop;
        r_ex_rfwt_sel = s_id_rfwt_sel;
        r_ex_brnch_sel = s_id_brnch_sel;
        r_ex_alusrc1 = s_id_alusrc1;
    };
};
