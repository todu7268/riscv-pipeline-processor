/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_defines.hcodal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */


#ifndef CA_DEFINES_HCODAL
#define CA_DEFINES_HCODAL

#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Signal size
// -------------------------------------------------------------------------------------------------

#define ALUOP_W        bitsizeof(enum aluop)
#define REGWRITE_W     bitsizeof(enum regwrite)
#define SRC2_W         bitsizeof(enum src2)
#define HALT_W         bitsizeof(enum halt)

//Phase 6 Register File Forwarding Macros
#define RFF1_W bitsizeof(enum rff1_sel)
#define RFF2_W bitsizeof(enum rff2_sel)

//Phase 6 Data Hazard Forwarding Macros
#define FWDA_W bitsizeof(enum fwdA_sel)
#define FWDB_W bitsizeof(enum fwdB_sel)

// -------------------------------------------------------------------------------------------------
// Enumerations
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// IF stage
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// ID stage
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// EX stage
// -------------------------------------------------------------------------------------------------

// ALU function codes
enum aluop
{
    ALU_NOP,
    ALU_ADD,
};

enum regwrite
{
    WE_FALSE,
    WE_TRUE,
};

enum src2
{
    ALU2_REG,
    ALU2_IMM,
};

enum halt
{
    HALT_NOHALT,
    HALT_HALT,
};

//Phase 6 Register File Forwarding Enums
enum rff1_sel 
{
    RFF1_REG,
    RFF1_FWD
};

enum rff2_sel
{
    RFF2_REG,
    RFF2_FWD
};

//Phase 6 Data Hazard Forwarding Enums
enum fwdA_sel
{
    FWDA_REG,
    FWDA_WB,
    FWDA_MEM
};

enum fwdB_sel
{
    FWDB_REG,
    FWDB_WB,
    FWDB_MEM
};

// -------------------------------------------------------------------------------------------------
// ME stage
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// WB stage
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// Auxiliary definitions
// -------------------------------------------------------------------------------------------------

#define DONT_CARE           0
#define NOP_INSTRUCTION     ITYPE_ADDI
#endif // CA_DEFINES_HCODAL

